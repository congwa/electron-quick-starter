// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<'dark' | 'light' | 'system'>;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
  openDevTools: () => Promise<void>;
  openExternal: (url: string) => Promise<void>;
  openPath: (path: string) => Promise<void>;
  showOpenDialog: () => Promise<Electron.OpenDialogReturnValue>;
  showSaveDialog: () => Promise<Electron.SaveDialogReturnValue>;
  showMessageBox: (
    options: Electron.MessageBoxOptions,
  ) => Promise<Electron.MessageBoxReturnValue>;
  showErrorBox: (title: string, content: string) => Promise<void>;
  loadView: (
    url: string,
    bounds: { x: number; y: number; width: number; height: number },
    options?: { navigatable?: boolean },
  ) => Promise<void>;
  removeView: () => Promise<void>;
  hideView: () => Promise<void>;
  showView: () => Promise<void>;
  scrapeView: () => Promise<string>; // Assuming this method returns HTML content
  getPlatformInfo: () => Promise<Electron.PlatformInformation>; // Replace with actual return type
  resetApp: () => Promise<void>;
  resetSettings: () => Promise<void>;
  relaunchApp: () => Promise<void>;
  reloadApp: () => Promise<void>;
  isPackaged: () => Promise<boolean>;
  quitApp: () => Promise<void>;
  getSystemPreferencesMediaAccess: () => Promise<Electron.SystemPreferencesMediaAccess>; // Replace with actual return type
}

interface SettingsModeContext {
  get: () => Promise<boolean>;
  set: () => Promise<void>;
  getLibrary: () => Promise<void>;
  setLibrary: () => Promise<boolean>;
}

type AppType = {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  settingsMode: SettingsModeContext;
};
